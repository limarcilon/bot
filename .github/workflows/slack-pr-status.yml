name: Notify Slack on Pull Request Events

on:
  pull_request:
    types: [opened, closed, edited, reopened, synchronize]

jobs:
  slack-notification:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Send notification to Slack
        id: slack
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        run: |
          if [ "${{ github.event.action }}" == "opened" ]; then
            STATUS="opened"
            MESSAGE="Pull Request opened by '${{ github.actor }}': '${{ github.event.pull_request.title }}' \nURL: ${{ github.event.pull_request.html_url}}"
            RESPONSE=$(curl -X POST -H 'Content-type: application/json' --data '{
              "text": "'"$MESSAGE"'"
            }' $SLACK_WEBHOOK_URL)
            TS=$(echo $RESPONSE | jq -r '.ts')
            CHANNEL=$(echo $RESPONSE | jq -r '.channel')
            echo "::set-output name=ts::$TS"
            echo "::set-output name=channel::$CHANNEL"
          else
            if [ "${{ github.event.action }}" == "closed" ]; then
              EMOJI="white_check_mark"
            elif [ "${{ github.event.action }}" == "reopened" ]; then
              EMOJI="recycle"
            elif [ "${{ github.event.action }}" == "edited" ]; then
              EMOJI="pencil2"
            elif [ "${{ github.event.action }}" == "synchronize" ]; then
              EMOJI="arrows_counterclockwise"
            fi
            curl -X POST -H "Authorization: Bearer $SLACK_BOT_TOKEN" -H 'Content-type: application/json' --data '{
              "name": "'"$EMOJI"'",
              "channel": "'"${{ steps.slack.outputs.channel }}"'",
              "timestamp": "'"${{ steps.slack.outputs.ts }}"'"
            }' https://slack.com/api/reactions.add
          fi